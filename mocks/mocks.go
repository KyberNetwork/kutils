// Code generated by MockGen. DO NOT EDIT.
// Source: batcher.go
//
// Generated by this command:
//
//	mockgen -source=batcher.go -destination mocks/mocks.go -package mocks
//
// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	kutils "github.com/KyberNetwork/kutils"
	gomock "go.uber.org/mock/gomock"
)

// MockBatchableTask is a mock of BatchableTask interface.
type MockBatchableTask[R any] struct {
	ctrl     *gomock.Controller
	recorder *MockBatchableTaskMockRecorder[R]
}

// MockBatchableTaskMockRecorder is the mock recorder for MockBatchableTask.
type MockBatchableTaskMockRecorder[R any] struct {
	mock *MockBatchableTask[R]
}

// NewMockBatchableTask creates a new mock instance.
func NewMockBatchableTask[R any](ctrl *gomock.Controller) *MockBatchableTask[R] {
	mock := &MockBatchableTask[R]{ctrl: ctrl}
	mock.recorder = &MockBatchableTaskMockRecorder[R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatchableTask[R]) EXPECT() *MockBatchableTaskMockRecorder[R] {
	return m.recorder
}

// Ctx mocks base method.
func (m *MockBatchableTask[R]) Ctx() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ctx")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Ctx indicates an expected call of Ctx.
func (mr *MockBatchableTaskMockRecorder[R]) Ctx() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ctx", reflect.TypeOf((*MockBatchableTask[R])(nil).Ctx))
}

// Done mocks base method.
func (m *MockBatchableTask[R]) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockBatchableTaskMockRecorder[R]) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockBatchableTask[R])(nil).Done))
}

// Resolve mocks base method.
func (m *MockBatchableTask[R]) Resolve(ret R, err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Resolve", ret, err)
}

// Resolve indicates an expected call of Resolve.
func (mr *MockBatchableTaskMockRecorder[R]) Resolve(ret, err any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockBatchableTask[R])(nil).Resolve), ret, err)
}

// MockBatcher is a mock of Batcher interface.
type MockBatcher[T kutils.BatchableTask[R], R any] struct {
	ctrl     *gomock.Controller
	recorder *MockBatcherMockRecorder[T, R]
}

// MockBatcherMockRecorder is the mock recorder for MockBatcher.
type MockBatcherMockRecorder[T kutils.BatchableTask[R], R any] struct {
	mock *MockBatcher[T, R]
}

// NewMockBatcher creates a new mock instance.
func NewMockBatcher[T kutils.BatchableTask[R], R any](ctrl *gomock.Controller) *MockBatcher[T, R] {
	mock := &MockBatcher[T, R]{ctrl: ctrl}
	mock.recorder = &MockBatcherMockRecorder[T, R]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatcher[T, R]) EXPECT() *MockBatcherMockRecorder[T, R] {
	return m.recorder
}

// Batch mocks base method.
func (m *MockBatcher[T, R]) Batch(task T) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Batch", task)
}

// Batch indicates an expected call of Batch.
func (mr *MockBatcherMockRecorder[T, R]) Batch(task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Batch", reflect.TypeOf((*MockBatcher[T, R])(nil).Batch), task)
}

// Close mocks base method.
func (m *MockBatcher[T, R]) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockBatcherMockRecorder[T, R]) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockBatcher[T, R])(nil).Close))
}
